{"version":3,"file":"static/js/472.92a50310.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","../node_modules/@babel/runtime/helpers/esm/readOnlyError.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import \"./appBanner.scss\";\r\nimport avengers from \"../../resources/img/Avengers.png\";\r\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\r\n\r\nconst AppBanner = () => {\r\n  return (\r\n    <div className=\"app__banner\">\r\n      <img src={avengers} alt=\"Avengers\" />\r\n      <div className=\"app__banner-text\">\r\n        New comics every week!\r\n        <br />\r\n        Stay tuned!\r\n      </div>\r\n      <img src={avengersLogo} alt=\"Avengers logo\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppBanner;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(err, errInfo) {\r\n    console.log(err, errInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"cover\", margin: \"0 auto\" }}\r\n      src={img}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./comicsList.scss\";\r\n\r\nconst ComicsList = () => {\r\n  const [comicsList, setComicsList] = useState([]);\r\n  const [offset, setOffset] = useState(0);\r\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n  const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n  const { loading, error, getAllComics } = useMarvelService();\r\n\r\n  useEffect(() => onRequest(offset, true), []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\r\n    getAllComics(offset).then(onComicsLoaded);\r\n  };\r\n\r\n  const onComicsLoaded = (newComicsLoaded) => {\r\n    const ended = false;\r\n    if (newComicsLoaded.length < 8) {\r\n      ended = true;\r\n    }\r\n\r\n    setComicsList([...comicsList, ...newComicsLoaded]);\r\n    setNewItemsLoading(false);\r\n    setOffset(offset + 8);\r\n    setComicsEnded(ended);\r\n  };\r\n\r\n  const postCardsWithComics = (comics) => {\r\n    return comics.map((item, i) => {\r\n      return (\r\n        <li className=\"comics__item\" key={i}>\r\n          <Link to={`/comics/${item.id}`}>\r\n            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\r\n            <div className=\"char__item-name\">{item.title}</div>\r\n            <div className=\"comics__item-price\">{item.price}</div>\r\n          </Link>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  const postComicsList = postCardsWithComics(comicsList);\r\n  const spinner = loading && !newItemsLoading ? <Spinner /> : null;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n\r\n  return (\r\n    <div className=\"comics__list\">\r\n      {spinner} {errorMessage}\r\n      <ul className=\"comics__grid\">{postComicsList}</ul>\r\n      <button\r\n        disabled={newItemsLoading}\r\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\r\n        className=\"button button__main button__long\"\r\n        onClick={() => onRequest(offset)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComicsList;\r\n","export default function _readOnlyError(name) {\n  throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\");\n}","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <AppBanner />\r\n      </ErrorBoundary>\r\n      <ErrorBoundary>\r\n        <ComicsList />\r\n      </ErrorBoundary>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=4a4925b838851c7de398b4ffaf6ece12\";\r\n  const _baseOffset = 210;\r\n\r\n  // getResource = async (url) => {\r\n  //   let res = await fetch(url);\r\n\r\n  //   if (!res.ok) {\r\n  //     throw new Error(`Could not fetch ${url}, status ${res.status}`);\r\n  //   }\r\n\r\n  //   return await res.json();\r\n  // };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 150)}...`\r\n        : \"Descripton about this character in progress. Sorry.\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getRequestOfNames = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return res.data.results[0].name;\r\n  };\r\n\r\n  const getCharacterName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return _transformCharacterByName(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacterByName = (char) => {\r\n    return {\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 215)}...`\r\n        : \"Descripton about this character in progress. Sorry.\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n    return await res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}` : `not available`,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComics,\r\n    getCharacterName,\r\n    getRequestOfNames,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["className","src","avengers","alt","avengersLogo","ErrorBoundary","state","error","err","errInfo","console","log","this","setState","props","children","Component","style","display","width","height","objectFit","margin","img","useState","comicsList","setComicsList","offset","setOffset","newItemsLoading","setNewItemsLoading","comicsEnded","setComicsEnded","useMarvelService","loading","getAllComics","useEffect","onRequest","initial","then","onComicsLoaded","newComicsLoaded","length","name","TypeError","postComicsList","map","item","i","to","id","thumbnail","title","price","spinner","Spinner","errorMessage","ErrorMessage","disabled","onClick","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","items","getRequestOfNames","getCharacterName","_transformCharacterByName","_transformComics","getComics","pageCount","language","textObjects","prices","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray"],"sourceRoot":""}