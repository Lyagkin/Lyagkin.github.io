{"version":3,"file":"static/js/148.559ea7fd.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/pages/SingleCharacterPage.js","components/pages/withSingleInformationPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import \"./appBanner.scss\";\r\nimport avengers from \"../../resources/img/Avengers.png\";\r\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\r\n\r\nconst AppBanner = () => {\r\n  return (\r\n    <div className=\"app__banner\">\r\n      <img src={avengers} alt=\"Avengers\" />\r\n      <div className=\"app__banner-text\">\r\n        New comics every week!\r\n        <br />\r\n        Stay tuned!\r\n      </div>\r\n      <img src={avengersLogo} alt=\"Avengers logo\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppBanner;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(err, errInfo) {\r\n    console.log(err, errInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"cover\", margin: \"0 auto\" }}\r\n      src={img}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import AppBanner from \"../appBanner/AppBanner\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport withSingleInformationPage from \"./withSingleInformationPage\";\r\n\r\nimport \"./singleCharacterPage.scss\";\r\n\r\nconst SingleCharacterPage = (props) => {\r\n  const { name, description, thumbnail } = props.state;\r\n\r\n  const Wrapper = () => {\r\n    return (\r\n      <>\r\n        <ErrorBoundary>\r\n          <AppBanner />\r\n        </ErrorBoundary>\r\n        <div className=\"singleCharacter\">\r\n          <img src={thumbnail} alt={name} className=\"singleCharacter-img\" />\r\n          <div className=\"singleCharacter-info\">\r\n            <h2 className=\"singleCharacter-name\">{name}</h2>\r\n            <p className=\"singleCharacter-descr\">{description}</p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const spinner = props.spinner;\r\n  const errorMessage = props.errorMessage;\r\n  const content = !(spinner || errorMessage || !props.state) ? <Wrapper /> : null;\r\n\r\n  return (\r\n    <>\r\n      {content} {spinner}\r\n      {errorMessage}\r\n    </>\r\n  );\r\n};\r\n\r\nconst SingleCharacter = withSingleInformationPage(SingleCharacterPage, useMarvelService);\r\n\r\nexport default SingleCharacter;\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst withSingleInformationPage = (BaseComponent, getData) => {\r\n  return (props) => {\r\n    const { comicsId, characterName } = useParams();\r\n\r\n    const [state, setState] = useState({});\r\n    const { loading, error, getComics, getCharacterName, clearError } = getData();\r\n\r\n    useEffect(() => {\r\n      if (comicsId) {\r\n        updateSingleInformationAboutComics();\r\n      } else if (characterName) {\r\n        updateSingleInformationAboutCharacter();\r\n      }\r\n    }, [comicsId, characterName]);\r\n\r\n    const updateSingleInformationAboutComics = () => {\r\n      clearError();\r\n      getComics(comicsId).then(onSingleInformationLoaded);\r\n    };\r\n\r\n    const updateSingleInformationAboutCharacter = () => {\r\n      clearError();\r\n      getCharacterName(characterName).then(onSingleInformationLoaded);\r\n    };\r\n\r\n    const onSingleInformationLoaded = (state) => {\r\n      setState(state);\r\n    };\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n\r\n    return <BaseComponent state={state} errorMessage={errorMessage} spinner={spinner}></BaseComponent>;\r\n  };\r\n};\r\n\r\nexport default withSingleInformationPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=4a4925b838851c7de398b4ffaf6ece12\";\r\n  const _baseOffset = 210;\r\n\r\n  // getResource = async (url) => {\r\n  //   let res = await fetch(url);\r\n\r\n  //   if (!res.ok) {\r\n  //     throw new Error(`Could not fetch ${url}, status ${res.status}`);\r\n  //   }\r\n\r\n  //   return await res.json();\r\n  // };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 150)}...`\r\n        : \"Descripton about this character in progress. Sorry.\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getRequestOfNames = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return res.data.results[0].name;\r\n  };\r\n\r\n  const getCharacterName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return _transformCharacterByName(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacterByName = (char) => {\r\n    return {\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 215)}...`\r\n        : \"Descripton about this character in progress. Sorry.\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n    return await res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}` : `not available`,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComics,\r\n    getCharacterName,\r\n    getRequestOfNames,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n"],"names":["className","src","avengers","alt","avengersLogo","ErrorBoundary","state","error","err","errInfo","console","log","this","setState","props","children","Component","style","display","width","height","objectFit","margin","img","withSingleInformationPage","name","description","thumbnail","Wrapper","AppBanner","spinner","errorMessage","content","useMarvelService","BaseComponent","getData","useParams","comicsId","characterName","useState","loading","getComics","getCharacterName","clearError","useEffect","updateSingleInformationAboutComics","updateSingleInformationAboutCharacter","then","onSingleInformationLoaded","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","char","slice","path","extension","homepage","urls","wiki","comics","items","getRequestOfNames","_transformCharacterByName","getAllComics","_transformComics","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}